
프로젝트 : Combine + SwiftUI

Goal

👉 Combine의 사용법을 익히고 구현해보기

👉 서버 구축이 안되어 있는 개발환경에서 Firebase 이용하여 데이터 연동/처리하기
Firebase : Auth, Database, Storage, Messaging

👉 Unit테스트 코드 작성해보기.
XCTest
Test Double

👉 비동기 처리
GCD, Swift Concurrency

👉 Remote Notification 구현
APNs

👉 이미지 캐시
Image Cache

👉 접근성에 대한 개념 익히기.

------------------------------------------------------------------------------------------------------------------------------

✅ Combine ?
- Apple에서 반응형 프로그래밍 개념을 기반으로 개발된 "프레임워크"
- "알아서 반응하는" 프로그래밍
- 데이터 변화 -> 감지 -> 반응 (업데이트)

1 ) 데이터 스트림 : 시간에 따라 만들어진 일련의 이벤트 , 연속적인 데이터 흐름 (추상적 개념)
ex) 탭 이벤트 스트림

2 ) 선언형 프로그래밍
명령형 <-> 선언형
    명령형 : 어떻게? , 코드가 어떻게 작업을 수행해야하는지 세부적으로 기술
        ex, for문을 통해 sum 을 구한다.
    선언형: 무엇을?, 결과에 집중, 구체적인 행위는 숨긴다. 가독성/유지보수성 향상
        ex, reduce 고차함수를 이용해서 sum을 구한다. ( closure에 숨김 = 결과값에만 집중 )

3 ) Observer pattern
    관찰자/ 구독자
    
4 ) Unified Interface
    
✅ Publisher, Subscriber
1. Publisher
- 데이터 스트림 생성
- 데이터 전달
- 데이터 변환/조합

* protocol Publisher<Output, Failure>
subscribe method

2. Subscriber
- 데이터 처리
- 이벤트 처리
- 구독 제어

* protocol Subscriber<Input, Failure>
receive method

-Pub-Sub Pattern
Event Channel : 구독자를 바로 공급자에 등록하는것이 아니라 중간에 이벤트 관리자를 두고 우회함. 느슨한 연결.
= Subscription

🔵구독 매커니즘
Subscriber는 구독을 원하는 Publisher에게 subscribe를 호출해서 구독을 요청함
요청 받은 Publisher는 구독자에게 전달할 구독권을 내부적으로 생성함
receive메소드를 통해 구독자에게 구독권을 전달함.
구독자는 구독권을 받아 subscription에게 demand를 요청함.

publiser는 관리되는 구독권들에게 값을 전달.
구독권은 구독자에게 값을 전달함.
구독자는 input을 받음.


1. Just : 값을 한 번 방출 후 종료
2. Empty: 값 없이 완료만
3. Fail : 특정 에러로 즉시 종료
4. Future : 최종적으로 하나의 값을 생성한 후 완료하거나, 실패.


sink: publisher의 extension으로 구현되어 있으며, sink 메서드로 편리하게 구독할 수 있음.
assign: publisher의 extension으로 구현되어 있으며, 지정된 key path로 값을 할당하는 subscriber

✅ Operator
- 변환 연산자 : map(publisher의 일종), trymap, flatmap
- 필터 연산자 : filter, compactMap
- 조합 연산자 : zip


✅ Error
Failure 타입이 명시되어 있음.

-Error handling
1. ReplaceError : 스트림 내에 에러가 발생했을 때, 대체 값을 제공하는 publisher
2. catch: upstream에서 발생한 에러를 다른 publisher로 대체. ( ex, catch에서 Just(nil) 리턴함 ), 에러와 함께 스트림 종료
    flatmap 안으로 넣어서 에러 후에도 스트림 유지 가능
    
3.setFailureType: publisher의 failure타입을 변형하는데 사용되는 publiser.
4.MapError: upstream publiser에서 발생한 에러를 새로운 에러로 변환하는 publisher.



✅ Scheduler
-데이터 스트림 지연 및 특정 스레드/큐에서 작업을 수행
-언제, 어디서 처리할지 정의 가능
-ReceiveOn, SubscribeOn
-Delay, Debounce.

1.ReceiveOn : ex, 메인큐에서 ui 업데이트 할 때 자주 사용
2.SubscribeOn : 데이터 스트림이 생성되는 스케줄러를 지정.


✅ Subject, Cancellation

1. Subject: publiser/subscriber 두역할을 수행

PassthoroughSubject
CurrentSubject

2. Cancellable protocol
어떠한 작업에 취소가 가능함을 나타내는 프로토콜
cancel 함수 제공

AnyCacellable 객체를 가지고 있다가 cancel 함수를 호출하여 구독을 취소.

✅ Type Erase
- 원래의 publisher의 타입을 지우고 AnyPublisher로 변환.
- 중첩되는 타입을 감춰 다양한 유형의 publisher를 처리하거나 반환 가능
- 일반화와 유연성이 높아짐.

------------------------------------------------------------------------------------------------------------------------------

SwiftUI

뷰는 데이터에 대한 의존성을 갖음.

Property Wrapper Type
= Property의 getter/setter를 이용해 사용자 패턴을 정의함.
= Wrapper Type을 체택하여 사용 가능 (@)

= @State :
    내부적으로 영구적인 저장소를 생성.
    저장소에 저장된 값을 참조하고 전달함.
    데이터를 유지하기 위해 사용함.
    어느 뷰에 의존되어 있는지 추적 가능.
    관련 뷰만 업데이트 가능 ( state로 선언된 내부 저장소 데이터가 변경되면 body를 재호출해서 뷰를 재생성 하는데, 이 때 모든 뷰를 진행하는게 아니고, 뷰 계층 구조를 찾아 내려가면서 유효성 검사를 진행 - 필요한 경우만 re-rendering 진행)
    
= @Binding
    SSOT : 단일 원천 자료
    동일한 데이터는 한 곳에서 다루고, 수정되어야 한다. (분산x)
    @State, @StateObject는 source of truth
    하위 뷰에도 같은 데이터를 필요로 한다면, 저장소를 새로 생성하는 것이 아니라 같은 저장소의 데이터를 바라볼 수 있도록 해야함.
    @Binding으로 연결
    
= @ObservableObject 프로토콜
    주로 viewmodel에서 채택해서 사용함.
    AnyObject를 체택하고 있으므로 Class로 선언해야함.
    이 클래스는 @StateObject, @ObservedObject로 선언되서 사용됨.
    
    @Published: ObservableObject클래스의 objectWillChange 함수를 자동으로 이벤트를 보냄.
            : StateObject로 선언, 선언된 객체의 Published 값을 통해 View에서 UI 업데이트가 진행됨.
    
    @StateObject: 외부 모델의 의존성과 뷰를 연결하는 작업을 진행.
    @State는 뷰 자신이 상태값을 갖고 있는 반면,StateObject는 외부 모델의 의존성을 갖고 있음.
    

= @EnvironmentObject
    ObservableObject & StateObject : 직접 바인딩으로 의존성을 전달해주어야 함. ( view 계층을 여러개 이동해야하는 경우에는 반복해서 주입해줘야 하는 번거로움이 있음)
    EnvironmentObject : 간접적으로 전달 가능. 여러 뷰에 공용으로 사용되는 데이터 모델을 여기에 주입하고, 필요하면 뷰에서 이 클래스의 의존성을 꺼내 사용가능하다. "공용데이터"!!
    
------------------------------------------------------------------------------------------------------------------------------
Identity

    - Equality 동등성
    - Identity 동일성

    뷰 안에서 if 조건으로 분기처리하여 뷰를 각각 생성하는 경우 => swiftUI는 계층구조에서 각각 다른 브랜치를 각각 고유한 id를 가진다

Lifetime

    뷰의 value != 뷰의 identity
    뷰가 변경되었으면 swiftUI는 이전에 생성된 뷰를 dealloc.

    Identity 지속시간
    1.onAppear : id 할당
    2. 외부에 의해서 변경되거나 해당 뷰에 의해 종료되었을 때 (onDisapear) : id의 수명 종료
    = 뷰의 수명 = id의 수명

    state/stateobject 데이터는 뷰의 lifetime동안 유지.
    해당 저장공간은 view id와 연관되어 지속되는 저장소


Dependencies
    
    -properties > view's dependencies
    -body: view 계층구조
    
    dependency가 vieew(body)에 주입되고,  서브 뷰의 트리거를 통해 properites의 값이 변경되면, view는 새로운 body를 생성한다.
    
